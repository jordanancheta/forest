{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n// Shards Dashboards Colors\nimport camelize from 'camelize'; // Base color class\n\nvar Color =\n/*#__PURE__*/\nfunction () {\n  function Color(value) {\n    _classCallCheck(this, Color);\n\n    this.value = value;\n  }\n\n  _createClass(Color, [{\n    key: \"toHex\",\n    value: function toHex() {\n      return this.value;\n    }\n  }, {\n    key: \"toRGBA\",\n    value: function toRGBA() {\n      var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var c;\n\n      if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(this.value)) {\n        c = this.value.substring(1).split('');\n\n        if (c.length === 3) {\n          c = [c[0], c[0], c[1], c[1], c[2], c[2]];\n        }\n\n        c = '0x' + c.join('');\n        return 'rgba(' + [c >> 16 & 255, c >> 8 & 255, c & 255].join(',') + ',' + opacity + ')';\n      }\n    }\n  }]);\n\n  return Color;\n}();\n\nvar grays = {\n  'white': new Color('#ffffff'),\n  'gray100': new Color('#f8f9fa'),\n  'gray200': new Color('#e9ecef'),\n  'gray300': new Color('#dee2e6'),\n  'gray400': new Color('#ced4da'),\n  'gray500': new Color('#adb5bd'),\n  'gray600': new Color('#868e96'),\n  'gray700': new Color('#495057'),\n  'gray800': new Color('#343a40'),\n  'gray900': new Color('#212529'),\n  'black': new Color('#000')\n};\nvar colors = {\n  'blueishGrey': new Color('#5A6169'),\n  'blue': new Color('#007bff'),\n  'indigo': new Color('#674eec'),\n  'purple': new Color('#8445f7'),\n  'pink': new Color('#ff4169'),\n  'red': new Color('#c4183c'),\n  'orange': new Color('#fb7906'),\n  'yellow': new Color('#ffb400'),\n  'green': new Color('#17c671'),\n  'teal': new Color('#1adba2'),\n  'cyan': new Color('#00b8d8'),\n  'gray': grays['gray600'],\n  'grayDark': grays['gray800']\n}; // Custom colors specific to Shards Dashboards, includes the new \"grays\".\n\nvar newColors = {\n  'fiordBlue': new Color('#3D5170'),\n  'reagentGray': new Color('#818EA3'),\n  'shuttleGray': new Color('#5A6169'),\n  'mischka': new Color('#CACEDB'),\n  'athensGray': new Color('#E9ECEF'),\n  'salmon': new Color('#FF4169'),\n  'royalBlue': new Color('#674EEC'),\n  'java': new Color('#1ADBA2')\n};\nvar themeColors = {\n  'accent': colors['blue'],\n  'primary': colors['blue'],\n  'secondary': colors['blueishGrey'],\n  'success': colors['green'],\n  'info': colors['cyan'],\n  'warning': colors['yellow'],\n  'danger': colors['red'],\n  'light': grays['gray200'],\n  'dark': grays['gray800']\n}; // Allow users to override any color\n\nvar overrides = window.ShardsDashboards && window.ShardsDashboards.colors ? window.ShardsDashboards.colors : {}; // Parse overriden colors\n\nif (Object.keys(overrides).length !== 0 && overrides.constructor === Object) {\n  for (var colorName in overrides) {\n    if (overrides.hasOwnProperty(colorName)) {\n      if (!/^#([A-Fa-f0-9]{3}$)|([A-Fa-f0-9]{6}$)/.test(overrides[colorName])) throw new Error('Please provide a hexadecimal color value if you are trying to override the Shards Dashboards colors.');\n      overrides[camelize(colorName)] = new Color(overrides[colorName]);\n    }\n  }\n}\n\nexport default Object.assign({}, grays, colors, newColors, themeColors, overrides);","map":{"version":3,"sources":["/Users/jordanancheta/Desktop/FOREST/src/utils/colors.js"],"names":["camelize","Color","value","opacity","c","test","substring","split","length","join","grays","colors","newColors","themeColors","overrides","window","ShardsDashboards","Object","keys","constructor","colorName","hasOwnProperty","Error","assign"],"mappings":"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","sourcesContent":["// Shards Dashboards Colors\n\nimport camelize from 'camelize';\n\n// Base color class\nclass Color {\n  constructor(value) {\n    this.value = value;\n  }\n\n  toHex() {\n    return this.value;\n  }\n\n  toRGBA(opacity = 1) {\n    let c;\n    if(/^#([A-Fa-f0-9]{3}){1,2}$/.test(this.value)) {\n        c = this.value.substring(1).split('');\n        if (c.length === 3){\n            c = [c[0], c[0], c[1], c[1], c[2], c[2]];\n        }\n        c = '0x' + c.join('');\n        return 'rgba(' + [(c>>16)&255, (c>>8)&255, c&255].join(',') + ',' + opacity + ')';\n    }\n\t}\n}\n\nconst grays = {\n  'white'  : new Color('#ffffff'),\n  'gray100': new Color('#f8f9fa'),\n  'gray200': new Color('#e9ecef'),\n  'gray300': new Color('#dee2e6'),\n  'gray400': new Color('#ced4da'),\n  'gray500': new Color('#adb5bd'),\n  'gray600': new Color('#868e96'),\n  'gray700': new Color('#495057'),\n  'gray800': new Color('#343a40'),\n  'gray900': new Color('#212529'),\n  'black'  : new Color('#000'),\n};\n\nconst colors = {\n  'blueishGrey': new Color('#5A6169'),\n  'blue'       : new Color('#007bff'),\n  'indigo'     : new Color('#674eec'),\n  'purple'     : new Color('#8445f7'),\n  'pink'       : new Color('#ff4169'),\n  'red'        : new Color('#c4183c'),\n  'orange'     : new Color('#fb7906'),\n  'yellow'     : new Color('#ffb400'),\n  'green'      : new Color('#17c671'),\n  'teal'       : new Color('#1adba2'),\n  'cyan'       : new Color('#00b8d8'),\n  'gray'       : grays['gray600'],\n  'grayDark'   : grays['gray800']\n};\n\n// Custom colors specific to Shards Dashboards, includes the new \"grays\".\nconst newColors = {\n  'fiordBlue'  : new Color('#3D5170'),\n  'reagentGray': new Color('#818EA3'),\n  'shuttleGray': new Color('#5A6169'),\n  'mischka'    : new Color('#CACEDB'),\n  'athensGray' : new Color('#E9ECEF'),\n  'salmon'     : new Color('#FF4169'),\n  'royalBlue'  : new Color('#674EEC'),\n  'java'       : new Color('#1ADBA2'),\n}\n\nconst themeColors = {\n  'accent'   : colors['blue'],\n  'primary'  : colors['blue'],\n  'secondary': colors['blueishGrey'],\n  'success'  : colors['green'],\n  'info'     : colors['cyan'],\n  'warning'  : colors['yellow'],\n  'danger'   : colors['red'],\n  'light'    : grays['gray200'],\n  'dark'     : grays['gray800'],\n};\n\n// Allow users to override any color\nlet overrides = (window.ShardsDashboards && window.ShardsDashboards.colors) ?\n                        window.ShardsDashboards.colors : {};\n\n// Parse overriden colors\nif (Object.keys(overrides).length !== 0 && overrides.constructor === Object) {\n  for (var colorName in overrides) {\n    if (overrides.hasOwnProperty(colorName)) {\n      if (!/^#([A-Fa-f0-9]{3}$)|([A-Fa-f0-9]{6}$)/.test(overrides[colorName]))\n        throw new Error('Please provide a hexadecimal color value if you are trying to override the Shards Dashboards colors.');\n      overrides[camelize(colorName)] = new Color(overrides[colorName]);\n    }\n  }\n}\n\nexport default Object.assign(\n  {},\n  grays,\n  colors,\n  newColors,\n  themeColors,\n  overrides\n);\n\n"]},"metadata":{},"sourceType":"module"}