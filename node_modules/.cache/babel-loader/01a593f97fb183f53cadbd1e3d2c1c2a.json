{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jordanancheta/Desktop/FOREST/src/components/analytics/UsersByDevice.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, CardHeader, CardBody, CardFooter, Row, Col, FormSelect } from \"shards-react\";\nimport colors from \"../../utils/colors\";\nimport Chart from \"../../utils/chart\";\n\nvar UsersByDevice =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(UsersByDevice, _React$Component);\n\n  function UsersByDevice(props) {\n    var _this;\n\n    _classCallCheck(this, UsersByDevice);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UsersByDevice).call(this, props));\n    _this.canvasRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(UsersByDevice, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var chartConfig = {\n        type: \"doughnut\",\n        options: _objectSpread({}, {\n          legend: false,\n          cutoutPercentage: 80,\n          tooltips: {\n            enabled: false,\n            mode: \"index\",\n            position: \"nearest\"\n          }\n        }, this.props.chartOptions),\n        data: this.props.chartData\n      };\n      new Chart(this.canvasRef.current, chartConfig);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var title = this.props.title;\n      var labels = this.getParsedLabels();\n      return React.createElement(Card, {\n        small: true,\n        className: \"ubd-stats h-100\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        className: \"border-bottom\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        className: \"m-0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, title), React.createElement(\"div\", {\n        className: \"block-handle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      })), React.createElement(CardBody, {\n        className: \"d-flex flex-column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"canvas\", {\n        width: \"100\",\n        ref: this.canvasRef,\n        className: \"analytics-users-by-device mt-3 mb-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"ubd-stats__legend w-75 m-auto pb-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, labels.map(function (label, idx) {\n        return React.createElement(\"div\", {\n          key: idx,\n          className: \"ubd-stats__item\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, label.icon && React.createElement(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: label.icon\n          },\n          style: {\n            color: label.iconColor\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          className: \"ubd-stats__category\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, label.title), React.createElement(\"span\", {\n          className: \"ubd-stats__value\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, label.value, \"%\"));\n      }))), React.createElement(CardFooter, {\n        className: \"border-top\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(FormSelect, {\n        size: \"sm\",\n        value: \"last-week\",\n        style: {\n          maxWidth: \"130px\"\n        },\n        onChange: function onChange() {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"last-week\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"Last Week\"), React.createElement(\"option\", {\n        value: \"today\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Today\"), React.createElement(\"option\", {\n        value: \"last-month\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"Last Month\"), React.createElement(\"option\", {\n        value: \"last-year\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"Last Year\"))), React.createElement(Col, {\n        className: \"text-right view-report\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"#\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"View full report \\u2192\")))));\n    }\n  }, {\n    key: \"getParsedLabels\",\n    value: function getParsedLabels() {\n      var chartData = this.props.chartData;\n\n      if (!chartData || typeof chartData.labels === \"undefined\") {\n        return [];\n      }\n\n      return chartData.labels.map(function (label, idx) {\n        var dataset = chartData.datasets[0];\n        return {\n          title: label,\n          icon: dataset.icons[idx],\n          iconColor: dataset.backgroundColor[idx],\n          value: dataset.data[idx]\n        };\n      });\n    }\n  }]);\n\n  return UsersByDevice;\n}(React.Component);\n\nUsersByDevice.propTypes = {\n  /**\n   * The card's title.\n   */\n  title: PropTypes.string,\n\n  /**\n   * The Chart.js options.\n   */\n  chartOptions: PropTypes.object,\n\n  /**\n   * The chart data.\n   */\n  chartData: PropTypes.object,\n\n  /**\n   * The Chart.js config.\n   */\n  chartConfig: PropTypes.object\n};\nUsersByDevice.defaultProps = {\n  title: \"Users by Device\",\n  chartConfig: Object.create(null),\n  chartOptions: Object.create(null),\n  chartData: {\n    labels: [\"Desktop\", \"Tablet\", \"Mobile\"],\n    datasets: [{\n      hoverBorderColor: colors.white.toRGBA(1),\n      data: [68.3, 24.2, 7.5],\n      icons: ['<i class=\"material-icons\">&#xE30B;</i>', '<i class=\"material-icons\">&#xE32F;</i>', '<i class=\"material-icons\">&#xE325;</i>'],\n      backgroundColor: [colors.primary.toRGBA(0.9), colors.primary.toRGBA(0.5), colors.primary.toRGBA(0.3)]\n    }]\n  }\n};\nexport default UsersByDevice;","map":{"version":3,"sources":["/Users/jordanancheta/Desktop/FOREST/src/components/analytics/UsersByDevice.js"],"names":["React","PropTypes","Card","CardHeader","CardBody","CardFooter","Row","Col","FormSelect","colors","Chart","UsersByDevice","props","canvasRef","createRef","chartConfig","type","options","legend","cutoutPercentage","tooltips","enabled","mode","position","chartOptions","data","chartData","current","title","labels","getParsedLabels","map","label","idx","icon","__html","color","iconColor","value","maxWidth","dataset","datasets","icons","backgroundColor","Component","propTypes","string","object","defaultProps","Object","create","hoverBorderColor","white","toRGBA","primary"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  CardFooter,\n  Row,\n  Col,\n  FormSelect\n} from \"shards-react\";\n\nimport colors from \"../../utils/colors\";\nimport Chart from \"../../utils/chart\";\n\nclass UsersByDevice extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.canvasRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const chartConfig = {\n      type: \"doughnut\",\n      options: {\n        ...{\n          legend: false,\n          cutoutPercentage: 80,\n          tooltips: {\n            enabled: false,\n            mode: \"index\",\n            position: \"nearest\"\n          }\n        },\n        ...this.props.chartOptions\n      },\n      data: this.props.chartData\n    };\n\n    new Chart(this.canvasRef.current, chartConfig);\n  }\n\n  render() {\n    const { title } = this.props;\n    const labels = this.getParsedLabels();\n\n    return (\n      <Card small className=\"ubd-stats h-100\">\n        <CardHeader className=\"border-bottom\">\n          <h6 className=\"m-0\">{title}</h6>\n          <div className=\"block-handle\" />\n        </CardHeader>\n\n        <CardBody className=\"d-flex flex-column\">\n          {/* Chart */}\n          <canvas\n            width=\"100\"\n            ref={this.canvasRef}\n            className=\"analytics-users-by-device mt-3 mb-4\"\n          />\n\n          {/* Legend */}\n          <div className=\"ubd-stats__legend w-75 m-auto pb-4\">\n            {labels.map((label, idx) => (\n              <div key={idx} className=\"ubd-stats__item\">\n                {label.icon && (\n                  <div\n                    dangerouslySetInnerHTML={{ __html: label.icon }}\n                    style={{ color: label.iconColor }}\n                  />\n                )}\n                <span className=\"ubd-stats__category\">{label.title}</span>\n                <span className=\"ubd-stats__value\">{label.value}%</span>\n              </div>\n            ))}\n          </div>\n        </CardBody>\n\n        <CardFooter className=\"border-top\">\n          <Row>\n            {/* Time Span */}\n            <Col>\n              <FormSelect\n                size=\"sm\"\n                value=\"last-week\"\n                style={{ maxWidth: \"130px\" }}\n                onChange={() => {}}\n              >\n                <option value=\"last-week\">Last Week</option>\n                <option value=\"today\">Today</option>\n                <option value=\"last-month\">Last Month</option>\n                <option value=\"last-year\">Last Year</option>\n              </FormSelect>\n            </Col>\n\n            {/* View Full Report */}\n            <Col className=\"text-right view-report\">\n              {/* eslint-disable-next-line */}\n              <a href=\"#\">View full report &rarr;</a>\n            </Col>\n          </Row>\n        </CardFooter>\n      </Card>\n    );\n  }\n\n  getParsedLabels() {\n    const { chartData } = this.props;\n\n    if (!chartData || typeof chartData.labels === \"undefined\") {\n      return [];\n    }\n\n    return chartData.labels.map((label, idx) => {\n      const dataset = chartData.datasets[0];\n\n      return {\n        title: label,\n        icon: dataset.icons[idx],\n        iconColor: dataset.backgroundColor[idx],\n        value: dataset.data[idx]\n      };\n    });\n  }\n}\n\nUsersByDevice.propTypes = {\n  /**\n   * The card's title.\n   */\n  title: PropTypes.string,\n  /**\n   * The Chart.js options.\n   */\n  chartOptions: PropTypes.object,\n  /**\n   * The chart data.\n   */\n  chartData: PropTypes.object,\n  /**\n   * The Chart.js config.\n   */\n  chartConfig: PropTypes.object\n};\n\nUsersByDevice.defaultProps = {\n  title: \"Users by Device\",\n  chartConfig: Object.create(null),\n  chartOptions: Object.create(null),\n  chartData: {\n    labels: [\"Desktop\", \"Tablet\", \"Mobile\"],\n    datasets: [\n      {\n        hoverBorderColor: colors.white.toRGBA(1),\n        data: [68.3, 24.2, 7.5],\n        icons: [\n          '<i class=\"material-icons\">&#xE30B;</i>',\n          '<i class=\"material-icons\">&#xE32F;</i>',\n          '<i class=\"material-icons\">&#xE325;</i>'\n        ],\n        backgroundColor: [\n          colors.primary.toRGBA(0.9),\n          colors.primary.toRGBA(0.5),\n          colors.primary.toRGBA(0.3)\n        ]\n      }\n    ]\n  }\n};\n\nexport default UsersByDevice;\n"]},"metadata":{},"sourceType":"module"}